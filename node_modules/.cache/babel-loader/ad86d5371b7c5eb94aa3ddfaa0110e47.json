{"ast":null,"code":"import debug from 'debug';\nimport { detect } from 'detect-browser';\nconst log = debug('speak');\nconst browser = detect();\nexport const speak = text => {\n  if (!window.speechSynthesis || window.speechSynthesis.speaking) {\n    log('speechSynthesis not available');\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    const ssu = new SpeechSynthesisUtterance(text);\n    const iosTrigger = document.getElementById('ios-speak');\n    ssu.lang = 'en-US';\n\n    if (browser.os === 'iOS') {\n      log('speak for Safari iOS');\n\n      const customSpeak = e => {\n        e.preventDefault();\n        window.speechSynthesis.speak(ssu);\n      };\n\n      iosTrigger.addEventListener('click', customSpeak);\n      iosTrigger.click();\n      iosTrigger.removeEventListener('click', customSpeak);\n      setTimeout(() => {\n        resolve();\n      }, 2000);\n    } else {\n      ssu.onend = () => {\n        resolve();\n      };\n\n      window.speechSynthesis.speak(ssu);\n    }\n  });\n};","map":{"version":3,"sources":["/home/INVOLVES/leticia.coelho/Documentos/react/rApartmentReact/src/lib/speak.ts"],"names":["debug","detect","log","browser","speak","text","window","speechSynthesis","speaking","Promise","resolve","reject","ssu","SpeechSynthesisUtterance","iosTrigger","document","getElementById","lang","os","customSpeak","e","preventDefault","addEventListener","click","removeEventListener","setTimeout","onend"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAAC,OAAD,CAAjB;AACA,MAAMG,OAAO,GAAGF,MAAM,EAAtB;AAEA,OAAO,MAAMG,KAAK,GAAIC,IAAD,IAAkB;AACrC,MAAI,CAACC,MAAM,CAACC,eAAR,IAA2BD,MAAM,CAACC,eAAP,CAAuBC,QAAtD,EAAgE;AAC9DN,IAAAA,GAAG,CAAC,+BAAD,CAAH;AACA;AACD;;AAED,SAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,GAAG,GAAG,IAAIC,wBAAJ,CAA6BR,IAA7B,CAAZ;AACA,UAAMS,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAnB;AACAJ,IAAAA,GAAG,CAACK,IAAJ,GAAW,OAAX;;AAEA,QAAId,OAAO,CAAEe,EAAT,KAAgB,KAApB,EAA2B;AACzBhB,MAAAA,GAAG,CAAC,sBAAD,CAAH;;AAEA,YAAMiB,WAAW,GAAIC,CAAD,IAAmB;AACrCA,QAAAA,CAAC,CAACC,cAAF;AACAf,QAAAA,MAAM,CAACC,eAAP,CAAuBH,KAAvB,CAA6BQ,GAA7B;AACD,OAHD;;AAKAE,MAAAA,UAAU,CAACQ,gBAAX,CAA4B,OAA5B,EAAqCH,WAArC;AACAL,MAAAA,UAAU,CAACS,KAAX;AACAT,MAAAA,UAAU,CAACU,mBAAX,CAA+B,OAA/B,EAAwCL,WAAxC;AACAM,MAAAA,UAAU,CAAC,MAAM;AACff,QAAAA,OAAO;AACR,OAFS,EAEP,IAFO,CAAV;AAGD,KAdD,MAcO;AACLE,MAAAA,GAAG,CAACc,KAAJ,GAAY,MAAM;AAChBhB,QAAAA,OAAO;AACR,OAFD;;AAGAJ,MAAAA,MAAM,CAACC,eAAP,CAAuBH,KAAvB,CAA6BQ,GAA7B;AACD;AACF,GAzBM,CAAP;AA0BD,CAhCM","sourcesContent":["import debug from 'debug'\nimport { detect } from 'detect-browser'\n\nconst log = debug('speak')\nconst browser = detect()\n\nexport const speak = (text: string) => {\n  if (!window.speechSynthesis || window.speechSynthesis.speaking) {\n    log('speechSynthesis not available')\n    return\n  }\n\n  return new Promise((resolve, reject) => {\n    const ssu = new SpeechSynthesisUtterance(text)\n    const iosTrigger = document.getElementById('ios-speak') as HTMLButtonElement\n    ssu.lang = 'en-US'\n\n    if (browser!.os === 'iOS') {\n      log('speak for Safari iOS')\n\n      const customSpeak = (e: MouseEvent) => {\n        e.preventDefault()\n        window.speechSynthesis.speak(ssu)\n      }\n\n      iosTrigger.addEventListener('click', customSpeak)\n      iosTrigger.click()\n      iosTrigger.removeEventListener('click', customSpeak)\n      setTimeout(() => {\n        resolve()\n      }, 2000)\n    } else {\n      ssu.onend = () => {\n        resolve()\n      }\n      window.speechSynthesis.speak(ssu)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}