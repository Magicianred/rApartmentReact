{"ast":null,"code":"var _jsxFileName = \"/home/INVOLVES/leticia.coelho/Documentos/react/rApartmentReact/src/pages/Home/ExerciseTimeChoice.tsx\";\nimport { FormControl, FormLabel } from '@chakra-ui/core';\nimport { useObserver } from 'mobx-react-lite';\nimport React from 'react';\nimport { TimeSelect } from '../../components';\nimport { useStore } from '../../hooks/useStore';\nexport const ExerciseTimeChoice = () => {\n  const {\n    exercise\n  } = useStore();\n  return useObserver(() => /*#__PURE__*/React.createElement(FormControl, {\n    mb: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    htmlFor: \"exercise-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, \"Exercise time: \", exercise.newExercise.exerciseTime, \" seconds\"), /*#__PURE__*/React.createElement(TimeSelect, {\n    id: \"exercise-time\",\n    value: exercise.newExercise.exerciseTime,\n    onChange: e => {\n      const parsedSeconds = parseInt(e.target.value);\n      exercise.changeExerciseTime(isNaN(parsedSeconds) ? 0 : parsedSeconds);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  })));\n};","map":{"version":3,"sources":["/home/INVOLVES/leticia.coelho/Documentos/react/rApartmentReact/src/pages/Home/ExerciseTimeChoice.tsx"],"names":["FormControl","FormLabel","useObserver","React","TimeSelect","useStore","ExerciseTimeChoice","exercise","newExercise","exerciseTime","e","parsedSeconds","parseInt","target","value","changeExerciseTime","isNaN"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,iBAAvC;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAeF,QAAQ,EAA7B;AAEA,SAAOH,WAAW,CAAC,mBACjB,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACkBK,QAAQ,CAACC,WAAT,CAAqBC,YADvC,aADF,eAIE,oBAAC,UAAD;AACE,IAAA,EAAE,EAAC,eADL;AAEE,IAAA,KAAK,EAAEF,QAAQ,CAACC,WAAT,CAAqBC,YAF9B;AAGE,IAAA,QAAQ,EAAGC,CAAD,IAA6C;AACrD,YAAMC,aAAa,GAAGC,QAAQ,CAACF,CAAC,CAACG,MAAF,CAASC,KAAV,CAA9B;AAEAP,MAAAA,QAAQ,CAACQ,kBAAT,CAA4BC,KAAK,CAACL,aAAD,CAAL,GAAuB,CAAvB,GAA2BA,aAAvD;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADgB,CAAlB;AAgBD,CAnBM","sourcesContent":["import { FormControl, FormLabel } from '@chakra-ui/core'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { TimeSelect } from '../../components'\nimport { useStore } from '../../hooks/useStore'\n\nexport const ExerciseTimeChoice = () => {\n  const { exercise } = useStore()\n\n  return useObserver(() => (\n    <FormControl mb='2'>\n      <FormLabel htmlFor='exercise-time'>\n        Exercise time: {exercise.newExercise.exerciseTime} seconds\n      </FormLabel>\n      <TimeSelect\n        id='exercise-time'\n        value={exercise.newExercise.exerciseTime}\n        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n          const parsedSeconds = parseInt(e.target.value)\n\n          exercise.changeExerciseTime(isNaN(parsedSeconds) ? 0 : parsedSeconds)\n        }}\n      />\n    </FormControl>\n  ))\n}\n"]},"metadata":{},"sourceType":"module"}