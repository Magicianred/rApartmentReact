{"ast":null,"code":"import _initializerDefineProperty from \"/home/INVOLVES/leticia.coelho/Documentos/react/rApartmentReact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/home/INVOLVES/leticia.coelho/Documentos/react/rApartmentReact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/INVOLVES/leticia.coelho/Documentos/react/rApartmentReact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport arrayMove from 'array-move';\nimport { action, computed, observable } from 'mobx';\nimport { BaseStore } from './BaseStore';\nexport let RoundStore = (_class = (_temp = class RoundStore extends BaseStore {\n  get workoutLink() {\n    const obj = Object.create({});\n    this.rounds.forEach(round => {\n      if (!obj.hasOwnProperty(round.id.toString())) {\n        obj[round.id] = {\n          exercises: []\n        };\n      }\n    });\n    const base64 = btoa(JSON.stringify(this.rounds));\n    return `http://mino-timer.now.sh/workout/${base64}`;\n  }\n\n  addExercise() {\n    const {\n      newExercise\n    } = this.root.exercise;\n    newExercise.uid = this.counter;\n    this.counter++;\n\n    if (!this.rounds.has(newExercise.round)) {\n      this.log(`Creating round ${newExercise.round}`);\n      this.rounds.set(newExercise.round, {\n        id: newExercise.round,\n        exercises: [newExercise],\n        rest: {\n          recoveryTime: this.DEFAULT_RECOVERY_TIME,\n          secondsLeft: this.DEFAULT_RECOVERY_TIME\n        },\n        repetitions: 1\n      });\n    } else {\n      this.log(`Adding exercise to round ${newExercise.round}`);\n      this.rounds.get(newExercise.round).exercises.push(newExercise);\n    }\n\n    this.updateCache();\n    const addedId = newExercise.id;\n    this.root.exercise.newExercise = { ...newExercise\n    };\n    return addedId;\n  }\n\n  moveExercise(roundId, exerciseUid, direction) {\n    this.log(`Round ${roundId} moveExercise ${exerciseUid} ${direction}`);\n    const round = this.rounds.get(roundId);\n    if (!round) return;\n    const index = round.exercises.findIndex(item => item.uid === exerciseUid);\n\n    if (index === 0 && direction === 'UP' || index === round.exercises.length - 1 && direction === 'DOWN') {\n      return;\n    }\n\n    arrayMove.mutate(round.exercises, index, direction === 'UP' ? index - 1 : index + 1);\n  }\n\n  removeExercise(roundId, exerciseUid) {\n    const round = this.rounds.get(roundId);\n    if (!round) return;\n    round.exercises = round.exercises.filter(e => e.uid !== exerciseUid);\n\n    if (!round.exercises.length) {\n      this.rounds.delete(round.id);\n    }\n\n    this.updateCache();\n  }\n\n  updateCache() {\n    localStorage.setItem('rounds', JSON.stringify(this.rounds));\n  }\n\n  get savedRounds() {\n    const savedRounds = localStorage.getItem('rounds');\n\n    if (savedRounds) {\n      return JSON.parse(savedRounds);\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n\n    _initializerDefineProperty(this, \"counter\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"rounds\", _descriptor2, this);\n\n    let exerciseId = 1;\n\n    if (this.savedRounds) {\n      Object.keys(this.savedRounds).forEach(key => {\n        const round = this.savedRounds[key];\n        this.rounds.set(parseInt(key), round);\n        exerciseId += round.exercises.reduce((acc, value) => value.uid > acc ? value.uid + 1 : acc, exerciseId);\n      });\n    }\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"counter\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 1;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"rounds\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"workoutLink\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"workoutLink\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addExercise\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addExercise\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"moveExercise\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"moveExercise\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"removeExercise\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"removeExercise\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"savedRounds\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"savedRounds\"), _class.prototype)), _class);","map":{"version":3,"sources":["/home/INVOLVES/leticia.coelho/Documentos/react/rApartmentReact/src/store/RoundStore.ts"],"names":["arrayMove","action","computed","observable","BaseStore","RoundStore","workoutLink","obj","Object","create","rounds","forEach","round","hasOwnProperty","id","toString","exercises","base64","btoa","JSON","stringify","addExercise","newExercise","root","exercise","uid","counter","has","log","set","rest","recoveryTime","DEFAULT_RECOVERY_TIME","secondsLeft","repetitions","get","push","updateCache","addedId","moveExercise","roundId","exerciseUid","direction","index","findIndex","item","length","mutate","removeExercise","filter","e","delete","localStorage","setItem","savedRounds","getItem","parse","constructor","props","exerciseId","keys","key","parseInt","reduce","acc","value","Map"],"mappings":"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","sourcesContent":["import arrayMove from 'array-move'\nimport {action, computed, observable} from 'mobx'\nimport {BaseStore} from './BaseStore'\nimport type { RootStore } from './index'\n\nexport class RoundStore extends BaseStore {\n  @observable\n  counter = 1\n\n  @observable\n  rounds = new Map<Number, RoundData>()\n\n  @computed\n  get workoutLink() {\n    const obj = Object.create({})\n    this.rounds.forEach((round) => {\n      if (!obj.hasOwnProperty(round.id.toString())) {\n        obj[round.id] = {\n          exercises: []\n        }\n      }\n    })\n\n    const base64 = btoa(JSON.stringify(this.rounds))\n    return `http://mino-timer.now.sh/workout/${base64}`\n  }\n\n  @action\n  addExercise() {\n    const { newExercise } = this.root.exercise\n    newExercise.uid = this.counter\n    this.counter++\n\n    if (!this.rounds.has(newExercise.round)) {\n      this.log(`Creating round ${newExercise.round}`)\n      this.rounds.set(newExercise.round, {\n        id: newExercise.round,\n        exercises: [newExercise],\n        rest: {\n          recoveryTime: this.DEFAULT_RECOVERY_TIME,\n          secondsLeft: this.DEFAULT_RECOVERY_TIME\n        },\n        repetitions: 1\n      })\n    } else {\n      this.log(`Adding exercise to round ${newExercise.round}`)\n      this.rounds.get(newExercise.round)!.exercises.push(newExercise)\n    }\n\n    this.updateCache()\n    const addedId = newExercise.id\n\n    this.root.exercise.newExercise = {\n      ...newExercise\n    }\n\n    return addedId\n  }\n\n  @action\n  moveExercise(roundId: number, exerciseUid: number, direction: 'UP' | 'DOWN') {\n    this.log(`Round ${roundId} moveExercise ${exerciseUid} ${direction}`)\n    const round = this.rounds.get(roundId)\n\n    if (!round) return\n\n    const index = round.exercises.findIndex((item) => item.uid === exerciseUid)\n\n    if (\n      (index === 0 && direction === 'UP') ||\n      (index === round.exercises.length - 1 && direction === 'DOWN')\n    ) {\n      return\n    }\n\n    arrayMove.mutate(\n      round.exercises,\n      index,\n      direction === 'UP' ? index - 1 : index + 1\n    )\n  }\n\n  @action\n  removeExercise(roundId: number, exerciseUid: number) {\n    const round = this.rounds.get(roundId)\n\n    if (!round) return\n    round.exercises = round.exercises.filter((e) => e.uid !== exerciseUid)\n\n    if (!round.exercises.length) {\n      this.rounds.delete(round.id)\n    }\n\n    this.updateCache()\n  }\n\n  updateCache() {\n    localStorage.setItem('rounds', JSON.stringify(this.rounds))\n  }\n\n  @computed\n  get savedRounds(): { [key: string]: RoundData } | null {\n    const savedRounds = localStorage.getItem('rounds')\n\n    if (savedRounds) {\n      return JSON.parse(savedRounds)\n    }\n\n    return null\n  }\n\n  constructor(props: RootStore) {\n    super(props)\n\n    let exerciseId = 1\n\n    if (this.savedRounds) {\n      Object.keys(this.savedRounds).forEach((key) => {\n        const round: RoundData = this.savedRounds![key]\n\n        this.rounds.set(parseInt(key), round)\n        exerciseId += round.exercises.reduce(\n          (acc: number, value: ExerciseData) =>\n            value.uid > acc ? value.uid + 1 : acc,\n          exerciseId\n        )\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}