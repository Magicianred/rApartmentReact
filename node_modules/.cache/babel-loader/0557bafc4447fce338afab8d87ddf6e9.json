{"ast":null,"code":"import debug from 'debug';\nconst log = debug('time-worker');\nexport class TimerWorker {\n  constructor() {\n    this.intervalId = void 0;\n  }\n\n  clearInterval() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n\n    this.intervalId = undefined;\n  }\n\n  runTimer(seconds, onSecondsUpdate) {\n    log('runTimer start');\n    return new Promise(resolve => {\n      this.intervalId = setInterval(async () => {\n        seconds--;\n\n        if (seconds === 0) {\n          this.clearInterval();\n          resolve('Timer completed!');\n        }\n\n        await onSecondsUpdate(seconds);\n      }, process.env.NODE_ENV === 'test' ? 0 : 1000);\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/INVOLVES/leticia.coelho/Documentos/react/rApartmentReact/src/workers/timer-worker.ts"],"names":["debug","log","TimerWorker","intervalId","clearInterval","undefined","runTimer","seconds","onSecondsUpdate","Promise","resolve","setInterval","process","env","NODE_ENV"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAGD,KAAK,CAAC,aAAD,CAAjB;AAGA,OAAO,MAAME,WAAN,CAAkB;AAAA;AAAA,SACvBC,UADuB;AAAA;;AAEvBC,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKD,UAAT,EAAqB;AACnBC,MAAAA,aAAa,CAAC,KAAKD,UAAN,CAAb;AACD;;AACD,SAAKA,UAAL,GAAkBE,SAAlB;AACD;;AACDC,EAAAA,QAAQ,CAACC,OAAD,EAAkBC,eAAlB,EAAmE;AACzEP,IAAAA,GAAG,CAAC,gBAAD,CAAH;AAEA,WAAO,IAAIQ,OAAJ,CAAaC,OAAD,IAAa;AAC9B,WAAKP,UAAL,GAAkBQ,WAAW,CAC3B,YAAY;AACVJ,QAAAA,OAAO;;AAEP,YAAIA,OAAO,KAAK,CAAhB,EAAmB;AACjB,eAAKH,aAAL;AACAM,UAAAA,OAAO,CAAC,kBAAD,CAAP;AACD;;AAED,cAAMF,eAAe,CAACD,OAAD,CAArB;AACD,OAV0B,EAW3BK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,GAAkC,CAAlC,GAAsC,IAXX,CAA7B;AAaD,KAdM,CAAP;AAeD;;AA1BsB","sourcesContent":["import debug from 'debug'\n\nconst log = debug('time-worker')\ntype TimerCallback = (secondsLeft: number) => void\n\nexport class TimerWorker {\n  intervalId?: NodeJS.Timeout\n  clearInterval() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId)\n    }\n    this.intervalId = undefined\n  }\n  runTimer(seconds: number, onSecondsUpdate: TimerCallback): Promise<string> {\n    log('runTimer start')\n\n    return new Promise((resolve) => {\n      this.intervalId = setInterval(\n        async () => {\n          seconds--\n\n          if (seconds === 0) {\n            this.clearInterval()\n            resolve('Timer completed!')\n          }\n\n          await onSecondsUpdate(seconds)\n        },\n        process.env.NODE_ENV === 'test' ? 0 : 1000\n      )\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}