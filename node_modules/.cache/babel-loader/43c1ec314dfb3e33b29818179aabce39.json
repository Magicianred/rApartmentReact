{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\n\nexport class Filter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n    this.name = \"Filter\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this._filters = [];\n    const options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n    this._filters = [];\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this.gain = new Signal({\n      context: this.context,\n      units: \"decibels\",\n      value: options.gain\n    });\n    this._type = options.type;\n    this.rolloff = options.rolloff;\n    readOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      detune: 0,\n      frequency: 350,\n      gain: 0,\n      rolloff: -12,\n      type: \"lowpass\"\n    });\n  }\n  /**\n   * The type of the filter. Types: \"lowpass\", \"highpass\",\n   * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(type) {\n    const types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n    assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n    this._type = type;\n\n    this._filters.forEach(filter => filter.type = type);\n  }\n  /**\n   * The rolloff of the filter which is the drop in db\n   * per octave. Implemented internally by cascading filters.\n   * Only accepts the values -12, -24, -48 and -96.\n   */\n\n\n  get rolloff() {\n    return this._rolloff;\n  }\n\n  set rolloff(rolloff) {\n    const rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n    const possibilities = [-12, -24, -48, -96];\n    let cascadingCount = possibilities.indexOf(rolloffNum); // check the rolloff is valid\n\n    assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n    cascadingCount += 1;\n    this._rolloff = rolloffNum;\n    this.input.disconnect();\n\n    this._filters.forEach(filter => filter.disconnect());\n\n    this._filters = new Array(cascadingCount);\n\n    for (let count = 0; count < cascadingCount; count++) {\n      const filter = this.context.createBiquadFilter();\n      filter.type = this._type;\n      this.frequency.connect(filter.frequency);\n      this.detune.connect(filter.detune);\n      this.Q.connect(filter.Q);\n      this.gain.connect(filter.gain);\n      this._filters[count] = filter;\n    }\n\n    this._internalChannels = this._filters;\n    connectSeries(this.input, ...this._internalChannels, this.output);\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n\n\n  getFrequencyResponse(len = 128) {\n    // start with all 1s\n    const totalResponse = new Float32Array(len).map(() => 1);\n    const freqValues = new Float32Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const norm = Math.pow(i / len, 2);\n      const freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n\n    const magValues = new Float32Array(len);\n    const phaseValues = new Float32Array(len);\n\n    this._filters.forEach(() => {\n      const filterClone = this.context.createBiquadFilter();\n      filterClone.type = this._type;\n      filterClone.Q.value = this.Q.value;\n      filterClone.frequency.value = this.frequency.value;\n      filterClone.gain.value = this.gain.value;\n      filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n      magValues.forEach((val, i) => {\n        totalResponse[i] *= val;\n      });\n    });\n\n    return totalResponse;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._filters.forEach(filter => {\n      filter.disconnect();\n    });\n\n    writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    this.frequency.dispose();\n    this.Q.dispose();\n    this.detune.dispose();\n    this.gain.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../Tone/component/filter/Filter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n        this.name = \"Filter\";\n        this.input = new Gain({ context: this.context });\n        this.output = new Gain({ context: this.context });\n        this._filters = [];\n        const options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n        this._filters = [];\n        this.Q = new Signal({\n            context: this.context,\n            units: \"positive\",\n            value: options.Q,\n        });\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        this.detune = new Signal({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        this.gain = new Signal({\n            context: this.context,\n            units: \"decibels\",\n            value: options.gain,\n        });\n        this._type = options.type;\n        this.rolloff = options.rolloff;\n        readOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            Q: 1,\n            detune: 0,\n            frequency: 350,\n            gain: 0,\n            rolloff: -12,\n            type: \"lowpass\",\n        });\n    }\n    /**\n     * The type of the filter. Types: \"lowpass\", \"highpass\",\n     * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n     */\n    get type() {\n        return this._type;\n    }\n    set type(type) {\n        const types = [\"lowpass\", \"highpass\", \"bandpass\",\n            \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n        assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n        this._type = type;\n        this._filters.forEach(filter => filter.type = type);\n    }\n    /**\n     * The rolloff of the filter which is the drop in db\n     * per octave. Implemented internally by cascading filters.\n     * Only accepts the values -12, -24, -48 and -96.\n     */\n    get rolloff() {\n        return this._rolloff;\n    }\n    set rolloff(rolloff) {\n        const rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n        const possibilities = [-12, -24, -48, -96];\n        let cascadingCount = possibilities.indexOf(rolloffNum);\n        // check the rolloff is valid\n        assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n        cascadingCount += 1;\n        this._rolloff = rolloffNum;\n        this.input.disconnect();\n        this._filters.forEach(filter => filter.disconnect());\n        this._filters = new Array(cascadingCount);\n        for (let count = 0; count < cascadingCount; count++) {\n            const filter = this.context.createBiquadFilter();\n            filter.type = this._type;\n            this.frequency.connect(filter.frequency);\n            this.detune.connect(filter.detune);\n            this.Q.connect(filter.Q);\n            this.gain.connect(filter.gain);\n            this._filters[count] = filter;\n        }\n        this._internalChannels = this._filters;\n        connectSeries(this.input, ...this._internalChannels, this.output);\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n    getFrequencyResponse(len = 128) {\n        // start with all 1s\n        const totalResponse = new Float32Array(len).map(() => 1);\n        const freqValues = new Float32Array(len);\n        for (let i = 0; i < len; i++) {\n            const norm = Math.pow(i / len, 2);\n            const freq = norm * (20000 - 20) + 20;\n            freqValues[i] = freq;\n        }\n        const magValues = new Float32Array(len);\n        const phaseValues = new Float32Array(len);\n        this._filters.forEach(() => {\n            const filterClone = this.context.createBiquadFilter();\n            filterClone.type = this._type;\n            filterClone.Q.value = this.Q.value;\n            filterClone.frequency.value = this.frequency.value;\n            filterClone.gain.value = this.gain.value;\n            filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n            magValues.forEach((val, i) => {\n                totalResponse[i] *= val;\n            });\n        });\n        return totalResponse;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._filters.forEach(filter => {\n            filter.disconnect();\n        });\n        writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n        this.frequency.dispose();\n        this.Q.dispose();\n        this.detune.dispose();\n        this.gain.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Filter.js.map"]},"metadata":{},"sourceType":"module"}